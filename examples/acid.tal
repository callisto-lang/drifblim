( test file )

|00 @System/vector $2 &expansion $2 &wst $1 &rst $1 &metadata $2 &r $2 &g $2 &b $2 &debug $1 &state $1
|10 @Console/vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1

(
@|Prelude )

|0
|f @padabs/p1
|0f &p2
|00f &p3
|000f &p4

|0
$4 @padrel/p1
$4 &p2
$4 &p3
$4 &p4

|0
|padrel/p1 @padlab/p1
$padrel/p1 &p2
|/p1 &p3
$/p2 &p4

( start )

|0100 @program

	padabs/<test>
	padrel/<test>
	padlab/<test>
	rawhex/<test>
	lithex/<test>
	rawasc/<test>
	rawabs/<test>
	litabs/<test>
	rawzep/<test>
	litzep/<test>
	labels/<test>


	#010e DEO

	#01 ?{ ( skip ) #ffff }
	!{ ( skip ) #ffff }
	{ ( skip ) #ffff } POP2r

	( nested lambda )
	{ { "hello 0a $1 } STH2r !print-str } STH2r JSR2

	( function application )
	{ 01 02 03 04 05 } STH2r { LIT "0 ADD #18 DEO #2018 DEO JMP2r } STH2r foreach

	( get lambda length )
	{ "Dindeldums $1 } STH2r get-lambda-length <print-dec> #2018 DEO

	( allocated string )
	;hello-word print-str

	#800f DEO

BRK

(
@|Tests )

@padabs/<test> ( -- )
	.&p1 .&p2 EQU
	;&p3 ;&p4 EQU2
		AND
	.&p1 #0f EQU
		AND ;&name !<validate>
	&name "padabs 2000

@padrel/<test> ( -- )
	.&p1 .&p2 ADD #0c EQU
	;&p3 ;&p4 ADD2 #001c EQU2
		AND
	.&p1 #04 EQU
		AND ;&name !<validate>
	&name "padrel 2000

@padlab/<test> ( -- )
	.&p1 .&p3 EQU
	;&p4 ;&p2 SUB2 ;&p1 EQU2
		AND ;&name !<validate>
	&name "padrel 2000

@rawhex/<test> ( -- )
	LIT 12 LIT 34 ADD LIT 46 EQU
	LIT2 1234 LIT2 1234 ADD2 LIT2 2468 EQU2
		AND ;&name !<validate>
	&name "rawhex 2000

@lithex/<test> ( -- )
	#12 #34 ADD #46 EQU
	#1234 #1234 ADD2 #2468 EQU2
		AND ;&name !<validate>
	&name "lithex 2000

@rawasc/<test> ( -- )
	LIT "0 #30 EQU
	LIT2 "12 #3132 EQU2
		AND ;&name !<validate>
	&name "rawasc 2000

@rawabs/<test> ( -- )
	LIT2 =&target #89ab EQU2
		;&name !<validate>
	&name "rawabs 2000

@litabs/<test> ( -- )
	;&target #89ab EQU2
		;&name !<validate>
	&name "litabs 2000

@rawzep/<test> ( -- )
	LIT -&target #ab EQU
		;&name !<validate>
	&name "rawzep 2000

@litzep/<test> ( -- )
	.&target #ab EQU
		;&name !<validate>
	&name "litzep 2000

@labels/<test> ( -- )
	#3412 SWPk Object/<set-pos>
	Object/get-y Object/get-x EQU2
		;&name !<validate>
	&name "litzep 2000

(
@|Utils )

@<validate> ( flag name* -- )
	<pstr>
	?{ ;&fail !<pstr> }
	;&pass !<pstr>
	&fail "fail 0a $1
	&pass "pass 0a $1

@<pstr> ( str* -- )
	LDAk DUP ?{ POP POP2 JMP2r }
	.Console/write DEO INC2 !<pstr>

@<phex> ( short* -: )
	SWP /b
	&b ( byte -: )
		DUP #04 SFT /c
	&c ( byte -: )
		#0f AND DUP #09 GTH #27 MUL ADD [ LIT "0 ] ADD #18 DEO
		JMP2r



( raw lambda length )
_{ 01 02 03 }

@get-lambda-length ( lambda* -- length* )
	#0002 SUB2 LDA2
JMP2r

@print-str ( str* -- )
	&while ( -- )
		( send ) LDAk #18 DEO
		( loop ) INC2 LDAk ?&while
	POP2

JMP2r

@foreach ( arr* fn* -- )
	STH2
	DUP2
	DUP2 #0002 SUB2 LDA2 ADD2
	SWP2
	&l
		LDAk STH2kr JSR2
		INC2 NEQ2k ?&l
	POP2 POP2 POP2r
JMP2r

( a ( nested ( comment ) ) )

@<print-dec> ( short* -- )
	#2710 [ LIT2r 00fb ]
	&w ( -- )
		DIV2k #000a DIV2k MUL2 SUB2 SWPr EQUk OVR STHkr EQU AND ?&>skip
			DUP [ LIT "0 ] ADD #19 DEO
			INCr &>skip
		POP2 #000a DIV2 SWPr INCr STHkr ?&w
	POP2r POP2 POP2 JMP2r

$20 @label2

@hello-word "Hello 20 "World! 0a $1

(
@|Object )

@Object/y $1
	&get-x ( -- x ) [ LIT &x $1 ] JMP2r
	&<set-pos> ( x y -- ) ,&y STR ,&x STR JMP2r
@Object/get-y ( -- y ) ,&y LDR JMP2r
@Object/get-pos ( -- x y ) /get-x !/get-y

(
@|References )

@backward
.backward -backward
;backward =backward
,backward _backward
!backward ?backward

.forward -forward
;forward =forward
,forward _forward
!forward ?forward
@forward

|89ab
	@litabs/target
	@rawabs/target
	@litzep/target
	@rawzep/target

