( Usage: uxncli procblim.rom src/source.tal )

|10 @Console &vector $2 &read $1 &pad $5 &write $1 &err $1
|a0 @File1 &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2
|b0 @File2 &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2

|0000

	@src $40 @dst $40 @token $30 @next $2

|0100

	;on-console .Console/vector DEO2
	;macros .next STZ2

BRK

@on-console ( -> )

	;src STH2
	( filepath )
	.Console/read DEI
	DUP #20 LTH OVR #7f GTH ORA ,&end JCN
	STH2kr ;slen JSR2 #003f GTH2 ,&end JCN
		STH2r ;sput JSR2 BRK
		&end
	POP

	( output )
	STH2kr
	;dst ;scpy JSR2
	;&ext-txt ;dst ;scap JSR2 #0004 SUB2 ;scpy JSR2
	;dst .File2/name DEO2

	STH2r ,parse JSR
	( halt )
	#010f DEO

BRK
	&ext-txt ".pro.tal $1

@parse ( name* -- )

	.File1/name DEO2
	#0001 .File1/length DEO2

	&stream
		;&c .File1/read DEO2
		.File1/success DEI2 ORA #01 JCN JMP2r
		[ LIT &c $1 ] ,walk JSR
		,&stream JMP

JMP2r

@walk ( char -- )

	LIT '( EQUk NIP ,&toggle JCN
	LIT ') EQUk NIP ,&toggle JCN
	[ LIT &sleep $1 ] ,&skip JCN
	#20 GTHk NIP ,&append JCN
	;token
		DUP2 ,walk-token JSR
		#0030 ;mclr JSR2
	&skip
	POP

JMP2r
	&toggle #29 SUB ,&sleep STR JMP2r
	&append ;token ;sput JMP2

@walk-token ( token* -- )

	( skip empty ) ;slen JSR2 ORA #01 JCN JMP2r

	( macro )
	;token
		LDAk LIT '% EQU ;create-macro JCN2

	( replace )
	DUP2 ;find-macro JSR2
		ORAk ,replace-token JCN
	POP2

	( default )
	DUP2 ;slen JSR2 .File2/length DEO2
		.File2/write DEO2
	#0001 .File2/length DEO2
	;&ws .File2/write DEO2

JMP2r
	&ws 20

@replace-token ( macro* -- )

	;scap JSR2 INC2
	DUP2 ;slen JSR2 .File2/length DEO2
		.File2/write DEO2

JMP2r

( macro )

@create-macro ( token* -- )

	INC2
	( push name )
	DUP2 .next LDZ2 ;scpy JSR2
	;slen JSR2 .next LDZ2 ADD2 INC2 .next STZ2
	&stream
		;&c .File1/read DEO2
		,&c LDR LIT '{ EQU ,&stream JCN
		,&c LDR LIT '} EQU ,&end JCN
		.File1/success DEI2 #0000 EQU2 ,&end JCN
		[ LIT &c $1 ] .next LDZ2 ;sput JSR2
		,&stream JMP
	&end
	.next LDZ2
		DUP2 ;slen JSR2 ADD2 INC2 .next STZ2

JMP2r

@find-macro ( token* -- macro* )

	STH2
	;macros
	&while
		DUP2 STH2kr ;scmp JSR2 ,&found JCN
		,scap JSR INC2 ,scap JSR INC2
		LDAk ,&while JCN
	POP2
	POP2r
	#0000

JMP2r
	&found POP2r JMP2r

( stdlib )

@slen ( str* -- len* ) DUP2 ,scap JSR SWP2 SUB2 JMP2r
@scap ( str* -- end* ) LDAk #00 NEQ JMP JMP2r &w INC2 LDAk ,&w JCN JMP2r
@sput ( char str* -- ) ,scap JSR STA JMP2r
@scpy ( src* dst* -- ) STH2 &w LDAk STH2kr STA INC2r INC2 LDAk ,&w JCN POP2 #00 STH2r STA JMP2r
@scmp ( a* b* -- f ) STH2 &l LDAk LDAkr STHr ANDk #00 EQU ,&e JCN NEQk ,&e JCN POP2 INC2 INC2r ,&l JMP &e NIP2 POP2r EQU JMP2r
@mclr ( src* len* -- ) OVR2 ADD2 SWP2 &l STH2k #00 STH2r STA INC2 GTH2k ,&l JCN POP2 POP2 JMP2r

@macros ( name | body | name | body .. )
