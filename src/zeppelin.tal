( usage: drifblim.rom input.tal output.rom )

|10 @Console &vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1
|a0 @File &vector $2 &success $1 &success-lb $1 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2

|000

	@src $30
	@dst $30
	@token $30
	@scope $30
	@sublabel $30
	@head $2
	@halt $1
	@Rom/length $2

|000

	@Ref &abs-byte $1 &abs-short $1 &rel-byte $1 &rel-short $1
	( TODO:
	| create a list of references to replace before assembly: addr*, type
	| Type byte is: zep, abs*, rel, rel*
	| Set used flag in refs byte upon reference
	| Refs byte is: 0x80=created, 0x40=used )

|100

@on-reset ( -> )
	;meta #06 DEO2
	;await-src
	( >> )

@<await> ( addr* -> )
	.Console/vector DEO2
	.Console/type DEI ?{ ;dict/usage <pstr>
		#010f DEO }
	BRK

@await-src ( -> )
	.Console/read DEI
	( ) DUP #20 GTH ?{ POP ;await-dst !<await> }
	[ LIT2 00 &ptr -src ] INCk ,&ptr STR
	STZ2
	BRK

@await-dst ( -> )
	.Console/read DEI
	( ) DUP #20 GTH ?{
		POP <assemble>
		#010e DEO
		#010f DEO
		BRK }
	[ LIT2 00 &ptr -dst ] INCk ,&ptr STR
	STZ2
	BRK

@meta $1
	( name ) "Drifblim 0a
	( desc ) "Uxntal 20 "Assembler 0a
	( auth ) "By 20 "Devine 20 "Lu 20 "Linvega 0a
	( date ) "6 20 "Aug 20 "2024 $2

(
@|tokenizer )

@<assemble> ( -- )
	( | single pass )
	#0100 Rom/<set-head>
	;dict/reset <set-scope>
	;src handle-file .halt LDZ ?{
		Refs/<resolve>
		Rom/<save>
		(  Sym/<save> #800f DEO !<print-summary> ) }
	JMP2r

@handle-file ( f* -- )
	.File/name DEO2
	#0001 .File/length DEO2
	#0000
	&>s ( len* -- )
		;&c feof ?&end
		INC2 [ LIT &c $1 ] handle-char !&>s

	&end ( len* -- )
	ORA ?{
		;Include/mem ;token <scpy>
		;err/file !<set-error> }
	JMP2r

@handle-char ( c -- )
	DUP #20 GTH ?{
		POP ;token
		( ) LDAk ?{ POP2 JMP2r }
		DUP2 <parse-token> !<sclr> }
	#00 ;token scap/ STA2
	JMP2r

@<parse-token> ( t* -- )
	LDAk find-rune DUP2 #ffff EQU2 ?{
		INC2 LDA2
		( * ) JMP2 }
	POP2
	( | non-runic )
	is-hex ?Rom/<write-rawhex>
	is-opcode ?Rom/<write-opcode>
	!Lib/litjsi

@<set-error> ( name* -- )
	[ LIT2 01 -halt ] STZ
	( >> )

@<set-warn> ( name* -- )
	;err <pstr>
	<pstr>
	#2018 DEO
	;token <pstr>
	;dict/in <pstr>/
	;scope <pstr>/
	#0a18 DEO
	JMP2r

(
@|output )

@Sym/<save> ( -- )
	;dst DUP2 scap/ ;dict/sym-ext OVR2 <scpy>
	SWP2 .File/name DEO2
	;Heap/mem
	&>w ( -- )
		( addr ) #0002 .File/length DEO2
		DUP2 .File/write DEO2
		( name ) #0003 ADD2 DUP2 slen INC2 STH2k .File/length DEO2
		DUP2 .File/write DEO2
		STH2r ADD2 DUP2 #0003 ADD2 LDA ?&>w
	POP2 #00 ROT ROT STA
	JMP2r

@<print-summary> ( -- )
	( | Print summary )
	Heap/get-bounds
	&>l ( -- )
		INC2k INC2 LDA ?&skip
		#0003 ADD2 LDAk [ LIT "A ] SUB #1a LTH ?&skip
		LDAk [ LIT 28 ] EQU ?&skip
		DUP2 ;dict/reset wcmp ?&skip
		;dict/unused <pstr>/
		DUP2 <pstr>/
		#0a18 DEO &skip scap/ INC2 GTH2k ?&>l
	POP2 POP2
	( | result )
	;dict/assembled <pstr>/
	;dst <pstr>/
	( | length )
	;dict/in <pstr>/
	.Rom/length LDZ2 #00ff SUB2 <pdec>
	;dict/bytes <pstr>/
	;<create-symbol>/count LDA2 <pdec>
	;dict/labels !<pstr>/

(
@|Symbols )

@get-sublabel ( name* -- sublabel* )
	DUP2 slen ;sublabel slen ADD2 #0030 LTH2 ?{ ;err/sublabel !<set-error> }
	[ LIT2 &ptr $2 ] <scpy>
	;sublabel JMP2r

@<set-scope> ( t* -- )
	( | copy scope until sublabel )
	DUP2 [ LITr -scope ]
	&>w ( -- )
		LDAk [ LIT "/ ] EQU ?&end
		LDAk STHkr STZ
		INCr INC2 LDAk ?&>w &end POP2 #00 STHr STZ
	( | prepare sublabel pointer )
	;scope ;sublabel <scpy>
	[ LIT2 "/ 00 ] ;sublabel scap/
	( ptr ) INC2k ,get-sublabel/ptr STR2
	( cap ) STA2
	( >> )

@<create-symbol> ( name* -- )
	is-hex ?&invalid
	is-opcode ?&invalid
	is-runic ?&invalid
	( | debug )
	{ "creating: 20 $1 }
	STH2r <pstr>
	DUP2 <pstr>
	#2018 DEO
	.head LDZ2 <phex>
	#0a18 DEO
	DUP2 find-symbol INC2 ORA ?&not-unique
	( count ) [ LIT2 &count $2 ] INC2 ,&count STR2
	( addr* ) .head LDZ2 Heap/<push-short>
	( refs ) #80 Heap/<push-byte>
	( name[] ) !Heap/<push-string>

	&invalid ( name* -- )
	POP2 ;err/symbol !<set-error>

	&not-unique ( name* -- )
	( | find placeholder )
	( TODO: Optimize ) DUP2 find-symbol INC2 INC2 LDA #80 AND ?{
		find-symbol .head LDZ2 OVR2 STA2
		INC2 INC2 #80 ROT ROT STA
		JMP2r }
	POP2 ;err/duplicate !<set-error>

@<create-placeholder> ( name* -- )
	is-hex ?&invalid
	is-opcode ?&invalid
	is-runic ?&invalid
	( | debug )
	{ "forward: 20 $1 }
	STH2r <pstr>
	DUP2 <pstr>
	#0a18 DEO
	( count ) [ LIT2 &count $2 ] INC2 ,&count STR2
	( addr* ) #ffff Heap/<push-short>
	( refs ) #40 Heap/<push-byte>
	( name[] ) !Heap/<push-string>

	&invalid ( name* -- )
	POP2 ;err/symbol !<set-error>

	&not-unique ( name* -- )
	POP2 ;err/duplicate !<set-error>

@find-symbol ( name* -- <addr>* )
	,&t STR2
	Heap/get-bounds
	&>l ( -- )
		EQU2k ?&end
		#0003 ADD2 DUP2 [ LIT2 &t $2 ] wcmp ?&found
		scap/ INC2 GTH2k ?&>l &end POP2 POP2 #ffff JMP2r

	&found ( symbols* -- <addr>* )
	#0003 SUB2 NIP2 JMP2r

@get-any ( str* -- value* )
	is-hex ?shex
	!get-ref/eager

@get-ref ( token* -- addr* )
	LDA2k [ LIT2 "{ 00 ] NEQ2 ?{ POP2 Lambda/push }
	&eager ( -- )
	LDAk [ LIT "/ ] NEQ ?{ INC2 get-sublabel }
	LDAk [ LIT "& ] NEQ ?{ INC2 get-sublabel }
	( | debug )
	{ "get-ref: 2000 }
	STH2r <pstr>
	DUP2 <pstr>
	#0a18 DEO
	( | find symbol or create it )
	DUP2 find-symbol DUP2 #ffff NEQ2 ?{
		POP2 DUP2 <create-placeholder>
		DUP2 find-symbol }
	( | check if declared )
	INC2k INC2 LDA #80 AND ?{
		STH2k [ LIT &type $1 ] STH2r .head LDZ2 Refs/<new> }
	NIP2 LDA2 JMP2r

@Refs
	&<new> ( type value* addr* -- )
	[ LIT2 &ptr =&mem ] STH2k
	( addr* ) STA2
	( value* ) INC2r INC2r STH2kr STA2
	( type ) INC2r INC2r STH2kr STA
	( save ) INC2r [ LITr _&ptr ] STR2r
	JMP2r

	&<resolve> ( -- )
	,&ptr LDR2 ;&mem
	&>l ( -- )
		STH2k
		( | route )
		DUP2 #0004 ADD2 LDA
		( ) DUP .Ref/abs-byte NEQ ?{
			INC2kr INC2r STH2r LDA2 INC2 LDA STH2kr STA }
		( ) DUP .Ref/abs-short NEQ ?{
			STH2kr LDA2 <phex> #2018 DEO
			STH2kr INC2 INC2 LDA2 LDA2 <phex> #2018 DEO
			STH2kr INC2 INC2 LDA2 #0003 ADD2 <pstr> #0a18 DEO
			STH2kr INC2 INC2 LDA2 LDA2	STH2kr LDA2 ;Rom/mem ADD2 STA2

			 }
		( ) DUP .Ref/rel-byte NEQ ?{
			STH2kr INC2 INC2 LDA2 LDA2 STH2kr LDA2 SUB2 NIP STH2kr STA }
		( ) DUP .Ref/rel-short NEQ ?{
			STH2kr INC2 INC2 LDA2 LDA2 STH2kr LDA2 SUB2 STH2kr STA2 }
		POP POP2r
		
		( | debug )
		LDA2k <phex> #2018 DEO
		INC2k INC2 LDA2 <phex> #2018 DEO
		DUP2 #0004 ADD2 LDA <phex>/b #0a18 DEO



		( ) #0005 ADD2 GTH2k ?&>l
	POP2 POP2 JMP2r

@get-abs-byte ( label* -- addr )
	.Ref/abs-byte ;get-ref/type STA
	get-ref NIP JMP2r

@get-abs-short ( label* -- addr* )
	.Ref/abs-short ;get-ref/type STA !get-ref

@get-rel-byte ( label* -- distance )
	.Ref/rel-byte ;get-ref/type STA
	get-ref .head LDZ2 INC2 INC2 SUB2 NIP JMP2r

@get-rel-short ( label* -- distance* )
	.Ref/rel-short ;get-ref/type STA
	get-ref .head LDZ2 INC2 INC2 SUB2 JMP2r

(
@|helpers )

@is-hex ( str* -- str* f )
	DUP2
	&>w ( -- )
		LDAk chex INC ?{ POP2 #00 JMP2r }
		INC2 LDAk ?&>w
	POP2 #01 JMP2r

@is-opcode ( str* -- str* f )
	DUP2 find-opcode ?{ DUP2 ;opcodes/brk !scmp3 }
	#01 JMP2r

@is-runic ( str* -- str* f )
	LDAk find-rune INC2 ORA JMP2r

@find-rune ( char -- <addr>* )
	,&rune STR
	;runes/end ;runes
	&>l ( -- )
		LDAk [ LIT &rune $1 ] NEQ ?{ NIP2 JMP2r }
		#0003 ADD2 GTH2k ?&>l
	POP2 POP2 #ffff JMP2r

@find-opcode ( name* -- byte )
	STH2
	#2000
	&>l ( -- )
		#00 OVR #03 MUL ;opcodes ADD2 STH2kr scmp3 ?&on-found
		INC GTHk ?&>l
	POP2 POP2r #00 JMP2r

	&on-found ( `name* bounds* -- byte )
	( add keep mode to LIT ) NIP DUP #00 EQU #70 SFT ORA
	( move to modes ) STH2r #0003 ADD2
	( keep flag ) [ LITr 00 ]
	&>w ( -- )
		LDAk #20 OVR [ LIT "2 ] EQU ?&end
		DUP ADD OVR [ LIT "r ] EQU ?&end
		DUP ADD OVR [ LIT "k ] EQU ?&end
		DUP ADD OVR #00 EQU ?&end
		;err/opcode <set-warn> &end STH
		POP ORAr INC2 LDAk ?&>w
	POP2 STHr ADD JMP2r

@force-single ( addr* -- addr* )
	INC2k LDA ?{ JMP2r }
	;err/token !<set-warn>

@<stream-util> ( c -- )
	;&c feof ?<sclr>
	[ LIT &c $1 ] EQUk ?{ POP !<stream-util> }
	POP2 JMP2r

(
@|objects )

@Lib &padabs INC2 get-any !Rom/<set-head>
	&padrel INC2 get-any .head LDZ2 ADD2 !Rom/<set-head>
	&toplab INC2 !<set-scope>
	&sublab INC2 get-sublabel !<create-symbol>
	&litrel #80 Rom/<write-byte> &rawrel INC2 get-rel-byte !Rom/<write-byte>
	&litzep #80 Rom/<write-byte> &rawzep INC2 get-abs-byte !Rom/<write-byte>
	&litabs #a0 Rom/<write-byte> &rawabs INC2 get-abs-short !Rom/<write-short>
	&litjci INC2 #20 !Rom/<write-call>
	&litjmi INC2 #40 !Rom/<write-call>
	&litjsi #60 !Rom/<write-call>
	&lithex INC2 !Rom/<write-lithex>
	&rawstr INC2 !Rom/<write-str>
	&lambda force-single POP2 !Lambda/pop
	&comment force-single [ LIT ") ] <stream-util> !<sclr>
	&inctal INC2k ;Include/mem <scpy>
	<sclr>
	;Include/mem !handle-file
	&ignore POP2 JMP2r

@Lambda
	&push ( -- name* )
	[ LIT &count $1 ] INCk ,&count STR
	DUP [ LIT2 &&ptr =&mem ] INC2k ,&&ptr STR2
	STA
	( >> )
	&name ( id -- str* )
	DUP #04 SFT hexc SWP hexc ,&id STR2
	;&sym JMP2r

	&pop ( -- )
	,&&ptr LDR2 #0001 SUB2 LDAk /name <create-symbol>
	,&&ptr STR2
	JMP2r
	&sym cebb &id 0000 $1

@Heap
	&<push-short> ( short* -- )
	SWP /<push-byte>
	( >> )
	&<push-byte> ( byte -- )
	[ LIT2 &&ptr =&mem ] INC2k ,&&ptr STR2
	STA
	JMP2r

	&<push-string> ( word* -- )
	,&&ptr LDR2 STH2k <scpy>
	STH2r scap/ INC2 ,&&ptr STR2
	JMP2r

	&get-bounds ( -- to* from* )
	,&&ptr LDR2 ;&mem JMP2r

@Rom
	&<write-str> ( str* -: )
	LDAk /<write-byte>
	INC2 LDAk ?&<write-str>
	POP2 JMP2r

	&<write-opcode> ( str* -: )
	find-opcode !&<write-byte>

	&<write-lithex> ( str* -: )
	is-hex ?{ ;err/number <set-error> }
	DUP2 slen NIP
	( LIT ) DUP #04 EQU #50 SFT #80 ORA /<write-byte> !&<write-hex>

	&<write-rawhex> ( str* -: )
	DUP2 slen NIP
	( >> )
	&<write-hex> ( str* len -- )
	DUP #02 NEQ ?{ POP shex NIP !&<write-byte> }
	#04 NEQ ?{ shex !&<write-short> }
	POP2 ;err/number !<set-error>

	&<write-call> ( str* opc -: )
	/<write-byte>
	get-rel-short
	( >> )
	&<write-short> ( short* -: )
	SWP /<write-byte>
	( >> )
	&<write-byte> ( byte -: )
	DUP .head LDZ2 INC2k STH2
	;&mem ADD2 STA
	/<set-length>
	STH2r
	( >> )
	&<set-head> ( v* -: )
	.head STZ2
	JMP2r

	&<set-length> ( byte -- )
	?{ JMP2r }
	.head LDZ2
	( ) DUP2 OVR ?{ ;err/zeropage <set-error> }
	( ) #8000 LTH2 ?{ ;err/length <set-error> }
	.&length STZ2
	JMP2r

	&<save> ( -: )
	;dst .File/name DEO2
	.&length LDZ2 #00ff SUB2 .File/length DEO2
	;&output .File/write DEO2
	JMP2r

(
@|stdlib )

@feof ( addr* -: f )
	.File/read DEO2
	[ LIT2 00 -File/success-lb ] DEI EQU JMP2r

@scap ( str* -: end* )
	INC2 & LDAk ?scap
	JMP2r

@slen ( str* -: len* )
	DUP2 scap/ SWP2 SUB2 JMP2r

@wcmp ( a* b* -: f )
	STH2
	&>l ( a* `b* -- f )
		LDAk #21 LTH ?&end
		LDAk LDAkr STHr NEQ ?&end
		INC2 INC2r !&>l

	&end ( a* `b* -- f )
	LDA #21 LTH LDAr STHr #21 LTH AND JMP2r

@scmp3 ( a* b* -- f )
	STH2
	LDAkr LDAk STHr NEQ ?{ INC2r INC2 }
	LDA2r LDA2 STH2r EQU2 JMP2r

@chex ( c -: <val> )
	[ LIT "0 ] SUB DUP #0a LTH ?&end
	#27 SUB DUP #10 LTH ?&end
	POP #ff &end JMP2r

@hexc ( hex -- char )
	#0f AND #0a LTHk ?{
		SUB [ LIT "a ] ADD JMP2r }
	POP [ LIT "0 ] ADD JMP2r

@shex ( str* -: value* )
	[ LIT2r 0000 ]
	&>w ( `i* -- )
		( acc ) [ LITr 40 ] SFT2r
		( res ) LDAk chex [ LITr 00 ] STH
		ADD2r INC2 LDAk ?&>w
	POP2 STH2r JMP2r

@<scpy> ( src* dst* -: )
	STH2
	&>w ( src* `dst* -- )
		LDAk #00 STH2kr STA2
		INC2r INC2 LDAk ?&>w
	POP2 POP2r JMP2r

@<sclr> ( str* -- )
	#00 ROT ROT
	&>w ( -- )
		STAk INC2 LDAk ?&>w
	STA
	JMP2r

@<pstr> ( str* -: )
	LDAk #18 DEO
	INC2 & LDAk ?<pstr>
	POP2 JMP2r

@<pdec> ( short* -- )
	#2710 [ LIT2r 00fb ]
	&>w ( -- )
		DIV2k #000a DIV2k MUL2 SUB2 SWPr EQUk OVR STHkr EQU AND ?{
			DUP [ LIT "0 ] ADD #18 DEO
			INCr }
		POP2 #000a DIV2 SWPr INCr STHkr ?&>w
	POP2r POP2 POP2 JMP2r

@<phex> ( short* -: )
	SWP /b
	&b ( byte -: )
	DUP #04 SFT /c
	&c ( byte -: )
	#0f AND DUP #09 GTH #27 MUL ADD [ LIT "0 ] ADD #18 DEO
	JMP2r

(
@|assets )

@dict
	&usage "usage: 20 "drifblim.rom 20 "in.tal 20 "out.rom 0a $1
	&unused "-- 20 "Unused: 20 $1
	&reset "RESET $1
	&assembled "Assembled 20 $1 &in 20 "in 20 $1 &bytes 20 "bytes( $1 &labels 20 "labels). 0a $1
	&sym-ext ".sym $1

@err "!! 20 "Error: 20 $1
	&file "File $1
	&duplicate "Duplicate $1
	&number "Number $1
	&length "Length $1
	&reference "Reference $1
	&distance "Distance $1
	&symbol "Symbol $1
	&token "Token $1
	&sublabel "Sublabel $1
	&opcode "Opcode $1
	&nested "Nested $1
	&zeropage "Zero-page $1

@opcodes [
	"LIT "INC "POP "NIP "SWP "ROT "DUP "OVR
	"EQU "NEQ "GTH "LTH "JMP "JCN "JSR "STH
	"LDZ "STZ "LDR "STR "LDA "STA "DEI "DEO
	"ADD "SUB "MUL "DIV "AND "ORA "EOR "SFT
	&brk "BRK ]

@runes [
	"| =Lib/padabs "$ =Lib/padrel
	"} =Lib/lambda "( =Lib/comment
	"@ =Lib/toplab "& =Lib/sublab
	", =Lib/litrel "_ =Lib/rawrel
	". =Lib/litzep "- =Lib/rawzep
	"; =Lib/litabs "= =Lib/rawabs
	"? =Lib/litjci "! =Lib/litjmi
	5b =Lib/ignore 5d =Lib/ignore
	"# =Lib/lithex "" =Lib/rawstr
	"~ =Lib/inctal ]
	&end
(
@|buffers )


@Lambda/mem $100

@Include/mem $30

@Refs/mem ( addr*, symbol*, ref/type )
	$800

@Heap/mem ( addr*, refs, body[] )


|8000 @Rom/mem $100

@Rom/output

