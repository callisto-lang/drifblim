( usage: drifblim.rom input.tal output.rom )

|10 @Console &vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1
|a0 @File &vector $2 &success $1 &success-lb $1 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2
|00 @Ref &abs-byte $1 &abs-short $1 &rel-byte $1 &rel-short $1

|000

	@src $30
	@dst $30
	@token $30
	@scope $30
	@sublabel $30
	@halt $1
	@rom/head $2
	@rom/length $2

|100

@on-reset ( -> )
	;meta #06 DEO2
	;await-src
	( >> )

@<await> ( addr* -> )
	.Console/vector DEO2
	.Console/type DEI ?{ ;dict/usage <pstr>
		#010f DEO }
	BRK

@await-src ( -> )
	.Console/read DEI
	( ) DUP #20 GTH ?{ POP ;await-dst !<await> }
	[ LIT2 00 &ptr -src ] INCk ,&ptr STR
	STZ2
	BRK

@await-dst ( -> )
	.Console/read DEI
	( ) DUP #20 GTH ?{
		POP <assemble>
		#010e DEO
		#010f DEO
		BRK }
	[ LIT2 00 &ptr -dst ] INCk ,&ptr STR
	STZ2
	BRK

@meta $1
	( name ) "Drifblim 0a
	( desc ) "Uxntal 20 "Assembler 0a
	( auth ) "By 20 "Devine 20 "Lu 20 "Linvega 0a
	( date ) "8 20 "Aug 20 "2024 $2

(
@|Tokenizer )

@<assemble> ( -- )
	#0100 rom/<set-head>
	;dict/reset <set-scope>
	;src handle-file .halt LDZ ?{ refs/<resolve>
		rom/<save> !<print-info> }
	JMP2r

@handle-file ( f* -- )
	.File/name DEO2
	#0001 .File/length DEO2
	#0000
	&>s ( len* -- )
		;&c feof ?{
			INC2 [ LIT &c $1 ] handle-char !&>s }
	ORA ?{
		;include/mem ;token <scpy>
		;err/file !<set-error> }
	JMP2r

@handle-char ( c -- )
	DUP #20 GTH ?{
		POP ;token LDAk ?{ POP2 JMP2r }
		DUP2 <parse-token> !<sclr> }
	#00 ;token scap/ STA2
	JMP2r

@<parse-token> ( t* -- )
	LDAk find-rune DUP2 #ffff EQU2 ?{
		INC2 LDA2
		( * ) JMP2 }
	POP2
	( | non-runic )
	is-hex ?rom/<write-rawhex>
	is-opcode ?rom/<write-opcode>
	!lib/litjsi

@<set-error> ( name* -- )
	[ LIT2 01 -halt ] STZ
	( >> )

@<set-warn> ( name* -- )
	;err <pstr>
	<pstr>
	#2018 DEO
	;token <pstr>
	;dict/in <pstr>/
	;scope <pstr>/
	#0a18 DEO
	JMP2r

@<print-info> ( -- )
	syms/get-bounds
	&>l ( -- )
		( is used ) INC2k INC2 LDA #40 AND ?{
			( is capitalized ) DUP2 #0003 ADD2 LDA ciuc ?{
				;dict/unused <pstr>/
				DUP2 #0003 ADD2 <pstr>/
				#0a18 DEO } }
		#0003 ADD2 scap/ INC2 GTH2k ?&>l
	POP2 POP2
	( | result )
	;dict/assembled <pstr>/
	;dst <pstr>/
	;dict/in <pstr>/
	.rom/length LDZ2 #00ff SUB2 <pdec>
	;dict/bytes <pstr>/
	;<create-symbol>/count LDA2 <pdec>
	;dict/labels !<pstr>/

(
@|References )

@get-sublabel ( name* -- sublabel* )
	DUP2 slen ;sublabel slen ADD2 #0030 LTH2 ?{ ;err/sublabel !<set-error> }
	[ LIT2 &ptr $2 ] <scpy>
	;sublabel JMP2r

@<set-scope> ( t* -- )
	( | copy scope until sublabel )
	DUP2 [ LITr -scope ]
	&>w ( -- )
		LDAk [ LIT "/ ] EQU ?{
			LDAk STHkr STZ
			INCr INC2 LDAk ?&>w }
	POP2 #00 STHr STZ
	( | prepare sublabel pointer )
	;scope ;sublabel <scpy>
	[ LIT2 "/ 00 ] ;sublabel scap/
	( ptr ) INC2k ,get-sublabel/ptr STR2
	( cap ) STA2
	( >> )

@<create-symbol> ( name* -- )
	is-hex ?&invalid
	is-opcode ?&invalid
	is-runic ?&invalid
	DUP2 syms/find INC2 ORA ?&not-unique
	( count ) [ LIT2 &count $2 ] INC2 ,&count STR2
	( addr* ) .rom/head LDZ2 syms/<push-short>
	( refs ) #80 syms/<push-byte>
	( name[] ) !syms/<push-string>

	&invalid ( name* -- )
	POP2 ;err/symbol !<set-error>

	&not-unique ( name* -- )
	( | find placeholder )
	( TODO:
	| Optimize
	| merged with placeholder ) DUP2 syms/find INC2 INC2 LDA #80 AND ?{
		syms/find .rom/head LDZ2 OVR2 STA2
		INC2 INC2 LDAk #80 ORA ROT ROT STA
		JMP2r }
	POP2 ;err/duplicate !<set-error>

@<create-placeholder> ( name* -- )
	is-hex ?&invalid
	is-opcode ?&invalid
	is-runic ?&invalid
	( addr* ) #ffff syms/<push-short>
	( refs ) #40 syms/<push-byte>
	( name[] ) !syms/<push-string>

	&invalid ( name* -- )
	POP2 ;err/symbol !<set-error>

@get-any ( str* -- value* )
	is-hex ?shex
	( >> )

@get-ref ( token* -- addr* )
	LDA2k [ LIT2 "{ 00 ] NEQ2 ?{ POP2 lambda/push }
	LDAk [ LIT "/ ] NEQ ?{ INC2 get-sublabel }
	LDAk [ LIT "& ] NEQ ?{ INC2 get-sublabel }
	( | find symbol or create it )
	DUP2 syms/find DUP2 #ffff NEQ2 ?{
		POP2 DUP2 <create-placeholder>
		DUP2 syms/find }
	( | check if declared )
	INC2k INC2 LDA #80 AND ?{
		STH2k [ LIT &type $1 ] STH2r .rom/head LDZ2 refs/<new> }
	( | mark as used )
	INC2k INC2 LDAk #40 ORA ROT ROT STA
	NIP2 LDA2 JMP2r

@refs/<new> ( type value* addr* -- )
	[ LIT2 &ptr =&mem ] STH2k
	( addr* ) STA2
	( value* ) INC2r INC2r STH2kr STA2
	( type ) INC2r INC2r STH2kr STA
	( save ) INC2r [ LITr _&ptr ] STR2r
	( | check overflow )
	,&ptr LDR2 ;&mem-end LTH2 ?{ ;err/refs-overflow !<set-error> }
	JMP2r

@refs/<resolve> ( -- )
	( | TODO: Catch undefined placeholder symbols )
	,&ptr LDR2 ;&mem
	&>l ( -- )
		STH2k
		( | route )
		DUP2 #0004 ADD2 LDA
		( ) DUP .Ref/abs-byte NEQ ?{ STH2kr /resolve-abs STA
			POP }
		( ) DUP .Ref/abs-short NEQ ?{ STH2kr /resolve-abs STA2 }
		( ) DUP .Ref/rel-byte NEQ ?{ STH2kr /resolve-rel STA
			POP }
		( ) DUP .Ref/rel-short NEQ ?{ STH2kr /resolve-rel STA2 }
		POP POP2r
		( ) #0005 ADD2 GTH2k ?&>l
	POP2 POP2 JMP2r

@refs/resolve-abs ( ref* -- value* addr* )
	( value* ) INC2k INC2 LDA2 LDA2
	( addr* ) SWP2 LDA2 ;rom/mem ADD2 JMP2r

@refs/resolve-rel ( ref* -- value* addr* )
	( | TODO: catch distance overflow )
	( value* ) INC2k INC2 LDA2 LDA2 OVR2 LDA2 INC2 INC2 SUB2
	( addr* ) SWP2 LDA2 ;rom/mem ADD2 JMP2r

@get-abs-byte ( label* -- addr )
	.Ref/abs-byte ;get-ref/type STA
	get-ref NIP JMP2r

@get-abs-short ( label* -- addr* )
	.Ref/abs-short ;get-ref/type STA !get-ref

@get-rel-byte ( label* -- distance )
	.Ref/rel-byte ;get-ref/type STA
	( | TODO: catch distance overflow )
	get-ref .rom/head LDZ2 INC2 INC2 SUB2 NIP JMP2r

@get-rel-short ( label* -- distance* )
	.Ref/rel-short ;get-ref/type STA
	get-ref .rom/head LDZ2 INC2 INC2 SUB2 JMP2r

(
@|Library )

@lib ( runics )
	&padabs INC2 get-any !rom/<set-head>
	&padrel INC2 get-any .rom/head LDZ2 ADD2 !rom/<set-head>
	&toplab INC2 !<set-scope>
	&sublab INC2 get-sublabel !<create-symbol>
	&litrel #80 rom/<write-byte> &rawrel INC2 get-rel-byte !rom/<write-byte>
	&litzep #80 rom/<write-byte> &rawzep INC2 get-abs-byte !rom/<write-byte>
	&litabs #a0 rom/<write-byte> &rawabs INC2 get-abs-short !rom/<write-short>
	&litjci INC2 #20 !rom/<write-call>
	&litjmi INC2 #40 !rom/<write-call>
	&litjsi #60 !rom/<write-call>
	&lithex INC2 !rom/<write-lithex>
	&rawstr INC2 !rom/<write-str>
	&lambda POP2 !lambda/pop
	&comment POP2 !<walk-comment>
	&inctal INC2k ;include/mem <scpy>
	<sclr>
	;include/mem !handle-file
	&ignore POP2 JMP2r

(
@|Lambda )

@lambda/push ( -- name* )
	[ LIT &count $1 ] INCk ,&count STR
	DUP [ LIT2 &&ptr =&mem ] INC2k ,&&ptr STR2
	STA
	( >> )

@lambda/name ( id -- str* )
	DUP #04 SFT hexc SWP hexc ,&id STR2
	;&sym JMP2r

@lambda/pop ( -- )
	,&&ptr LDR2 #0001 SUB2 LDAk /name <create-symbol>
	,&&ptr STR2
	JMP2r
	&sym cebb &id 0000 $1

(
@|Syms )

@syms/find ( name* -- <addr>* )
	,&t STR2
	/get-bounds
	&>l ( -- )
		#0003 ADD2 DUP2 [ LIT2 &t $2 ] wcmp ?{
			scap/ INC2 GTH2k ?&>l &end POP2 POP2 #ffff JMP2r }
	#0003 SUB2 NIP2 JMP2r

@syms/get-bounds ( -- to* from* )
	,&&ptr LDR2 ;&mem JMP2r

@syms/<push-short> ( short* -- )
	SWP /<push-byte>
	( >> )

@syms/<push-byte> ( byte -- )
	[ LIT2 &&ptr =&mem ] INC2k ,&&ptr STR2
	STA
	JMP2r

@syms/<push-string> ( word* -- )
	,&&ptr LDR2 STH2k <scpy>
	STH2r scap/ INC2 ,&&ptr STR2
	JMP2r

(
@|Rom )

@rom/<write-str> ( str* -: )
	LDAk /<write-byte>
	INC2 LDAk ?&<write-str>
	POP2 JMP2r

@rom/<write-opcode> ( str* -: )
	find-opcode !&<write-byte>

@rom/<write-lithex> ( str* -: )
	is-hex ?{ ;err/number <set-error> }
	DUP2 slen NIP
	( LIT ) DUP #04 EQU #50 SFT #80 ORA /<write-byte> !&<write-hex>

@rom/<write-rawhex> ( str* -: )
	DUP2 slen NIP
	( >> )

@rom/<write-hex> ( str* len -- )
	DUP #02 NEQ ?{ POP shex NIP !&<write-byte> }
	#04 NEQ ?{ shex !&<write-short> }
	POP2 ;err/number !<set-error>

@rom/<write-call> ( str* opc -: )
	/<write-byte>
	get-rel-short
	( >> )

@rom/<write-short> ( short* -: )
	SWP /<write-byte>
	( >> )

@rom/<write-byte> ( byte -: )
	DUP .&head LDZ2 INC2k STH2
	;&mem ADD2 STA
	/<set-length>
	STH2r
	( >> )

@rom/<set-head> ( v* -: )
	.&head STZ2
	JMP2r

@rom/<set-length> ( byte -- )
	?{ JMP2r }
	.&head LDZ2
	( ) DUP2 OVR ?{ ;err/zeropage <set-error> }
	( ) #8000 LTH2 ?{ ;err/length <set-error> }
	.&length STZ2
	JMP2r

@rom/<save> ( -: )
	;dst .File/name DEO2
	.&length LDZ2 #00ff SUB2 .File/length DEO2
	;&output .File/write DEO2
	JMP2r

(
@|Helpers )

@is-hex ( str* -- str* f )
	DUP2
	&>w ( -- )
		LDAk chex INC ?{ POP2 #00 JMP2r }
		INC2 LDAk ?&>w
	POP2 #01 JMP2r

@is-opcode ( str* -- str* f )
	DUP2 find-opcode ?{ DUP2 ;opcodes/brk !scmp3 }
	#01 JMP2r

@is-runic ( str* -- str* f )
	LDAk find-rune INC2 ORA JMP2r

@find-rune ( char -- <addr>* )
	,&rune STR
	;runes/end ;runes
	&>l ( -- )
		LDAk [ LIT &rune $1 ] NEQ ?{ NIP2 JMP2r }
		#0003 ADD2 GTH2k ?&>l
	POP2 POP2 #ffff JMP2r

@find-opcode ( name* -- byte )
	STH2
	#2000
	&>l ( -- )
		#00 OVR #03 MUL ;opcodes ADD2 STH2kr scmp3 ?&on-found
		INC GTHk ?&>l
	POP2 POP2r #00 JMP2r

	&on-found ( `name* bounds* -- byte )
	( add keep mode to LIT ) NIP DUP #00 EQU #70 SFT ORA
	( move to modes ) STH2r #0003 ADD2
	( keep flag ) [ LITr 00 ]
	&>w ( -- )
		LDAk #20 OVR [ LIT "2 ] EQU ?&end
		DUP ADD OVR [ LIT "r ] EQU ?&end
		DUP ADD OVR [ LIT "k ] EQU ?&end
		DUP ADD OVR #00 EQU ?&end
		;err/opcode <set-warn> &end STH
		POP ORAr INC2 LDAk ?&>w
	POP2 STHr ADD JMP2r

@<walk-comment> ( -- )
	( depth ) [ LITr 00 ]
	&>s ( -- )
		;&c feof ?{
			[ LIT2 &c $1 "( ] NEQk ?{ INCr }
			POP [ LIT ") ] NEQ ?{ STHkr ?{ POPr JMP2r }
				[ LITr 01 ] SUBr }
			!&>s }
	JMP2r

(
@|stdlib )

@scap ( str* -: end* )
	INC2 & LDAk ?scap
	JMP2r

@slen ( str* -: len* )
	DUP2 scap/ SWP2 SUB2 JMP2r

@scmp3 ( a* b* -- f )
	STH2
	LDAkr LDAk STHr NEQ ?{ INC2r INC2 }
	LDA2r LDA2 STH2r EQU2 JMP2r

@shex ( str* -: value* )
	[ LIT2r 0000 ]
	&>w ( `i* -- )
		( acc ) [ LITr 40 ] SFT2r
		( res ) LDAk chex [ LITr 00 ] STH
		ADD2r INC2 LDAk ?&>w
	POP2 STH2r JMP2r

@<scpy> ( src* dst* -: )
	STH2
	&>w ( src* `dst* -- )
		LDAk #00 STH2kr STA2
		INC2r INC2 LDAk ?&>w
	POP2 POP2r JMP2r

@<sclr> ( str* -- )
	#00 ROT ROT
	&>w ( -- )
		STAk INC2 LDAk ?&>w
	STA
	JMP2r

@wcmp ( a* b* -: f )
	STH2
	&>l ( a* `b* -- f )
		LDAk #21 LTH ?{
			LDAk LDAkr STHr NEQ ?{ INC2 INC2r !&>l } }
	LDA #21 LTH LDAr STHr #21 LTH AND JMP2r

@hexc ( hex -- char )
	#0f AND #0a LTHk ?{
		SUB [ LIT "a ] ADD JMP2r }
	POP [ LIT "0 ] ADD JMP2r

@ciuc ( char -- uppercase )
	[ LIT "A ] SUB #1a LTH JMP2r

@chex ( c -: <val> )
	[ LIT "0 ] SUB DUP #0a LTH ?&end
	#27 SUB DUP #10 LTH ?&end
	POP #ff &end JMP2r

@feof ( addr* -: f )
	.File/read DEO2
	[ LIT2 00 -File/success-lb ] DEI EQU JMP2r

@<pstr> ( str* -: )
	LDAk #18 DEO
	INC2 & LDAk ?<pstr>
	POP2 JMP2r

@<pdec> ( short* -- )
	#2710 [ LIT2r 00fb ]
	&>w ( -- )
		DIV2k #000a DIV2k MUL2 SUB2 SWPr EQUk OVR STHkr EQU AND ?{
			DUP [ LIT "0 ] ADD #18 DEO
			INCr }
		POP2 #000a DIV2 SWPr INCr STHkr ?&>w
	POP2r POP2 POP2 JMP2r

@<phex> ( short* -: )
	SWP /b
	&b ( byte -: )
	DUP #04 SFT /c
	&c ( byte -: )
	#0f AND DUP #09 GTH #27 MUL ADD [ LIT "0 ] ADD #18 DEO
	JMP2r

(
@|Assets )

@dict
	&usage "usage: 20 "drifblim.rom 20 "in.tal 20 "out.rom 0a $1
	&unused "-- 20 "Unused: 20 $1
	&reset "RESET $1
	&assembled "Assembled 20 $1 &in 20 "in 20 $1 &bytes 20 "bytes( $1 &labels 20 "labels). 0a $1

@err "!! 20 "Error: 20 $1
	&file "File $1
	&duplicate "Duplicate $1
	&number "Number $1
	&length "Length $1
	&reference "Reference $1
	&distance "Distance $1
	&symbol "Symbol $1
	&sublabel "Sublabel $1
	&opcode "Opcode $1
	&zeropage "Zero-page $1
	&refs-overflow "Refs 20 "Overflow $1

@opcodes [
	"LIT "INC "POP "NIP "SWP "ROT "DUP "OVR
	"EQU "NEQ "GTH "LTH "JMP "JCN "JSR "STH
	"LDZ "STZ "LDR "STR "LDA "STA "DEI "DEO
	"ADD "SUB "MUL "DIV "AND "ORA "EOR "SFT
	&brk "BRK ]

@runes [
	"| =lib/padabs "$ =lib/padrel
	"} =lib/lambda "( =lib/comment
	"@ =lib/toplab "& =lib/sublab
	", =lib/litrel "_ =lib/rawrel
	". =lib/litzep "- =lib/rawzep
	"; =lib/litabs "= =lib/rawabs
	"? =lib/litjci "! =lib/litjmi
	5b =lib/ignore 5d =lib/ignore
	"# =lib/lithex "" =lib/rawstr
	"~ =lib/inctal ]
	&end
(
@|Buffers )


@lambda/mem $100

@include/mem $30

@refs/mem ( addr*, symbol*, ref/type )
	$1800 &mem-end

@syms/mem ( addr*, refs, body[] )


|8000 @rom/mem $100

@rom/output

