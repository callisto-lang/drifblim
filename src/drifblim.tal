( Drifblim )

|0000 @System     &vector $2 &wst      $1 &rst    $1 &eaddr  $2 &ecode  $1 &pad     $1 &r       $2 &g      $2 &b     $2 &debug  $1 &halt $1
|0010 @Console    &vector $2 &read     $1 &pad    $5 &write  $1 &error  $1
|00a0 @File       &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name    $2 &length  $2 &read   $2 &write $2

|0000

	@src $40
	@token $30
	@scope $30
	@buf $30
	@sleep $1
	@s
		&ptr $2
	@r
		&ptr $2
	@p
		&ptr $2
		&len $2
	@end

|0100

	;on-console .Console/vector DEO2

BRK

@on-console ( -> )

	.Console/read DEI
	DUP #20 LTH ,&end JCN
	DUP #7f GTH ,&end JCN
	;src ;slen JSR2 #003f GTH2 ,&end JCN
		;src ROT ;sput JSR2 BRK
		&end
	POP

	( assemble tokens )

	;src .File/name DEO2
	#0001 .File/length DEO2
	&stream
		;&c
			DUP2 .File/read DEO2
			( comment )
			LDAk #28 NEQ ,&no-sleep JCN
				#01 .sleep STZ ,&no-cap JMP
				&no-sleep
			LDAk #29 NEQ ,&no-wake JCN
				#00 .sleep STZ ,&no-cap JMP
				&no-wake
			.sleep LDZ ,&no-cap JCN
			( listen )
			LDAk #21 LTH ,&no-put JCN
				LDAk ;token ;scap JSR2 STA
				&no-put
			LDAk #20 GTH ,&no-cap JCN
				;find-token JSR2
				;token #0030 ;mclr JSR2
				&no-cap
		POP2
		.File/success DEI2 ORA ,&stream JCN

	( resolve references )

	;ref
	&while
		DUP2 ;resolve-reference JSR2
		( eol )
		#0002 ADD2 ;scap JSR2 INC2 DUP2 #0002 ADD2 LDA ,&while JCN
	POP2

	( make rom )

	;&rom-ext ;src ;scap JSR2 #0003 SUB2 ;scpy JSR2
	;src .File/name DEO2
	.p/len LDZ2 #0100 SUB2 .File/length DEO2
	;dst/clip .File/write DEO2

	( debug ) #010e DEO
	( halt ) #010f DEO

BRK
	&c $1
	&rom-ext "rom $1

@find-token ( -- )

	( skip blank ) ;token ;slen JSR2 #0000 NEQ2 JMP JMP2r

	;token LDA
	( pads )
	DUP LIT '| NEQ ,&no-padabs JCN
		;token INC2 ;shex JSR2 .p/ptr STZ2 POP JMP2r
		&no-padabs
	DUP LIT '$ NEQ ,&no-padrel JCN
		.p/ptr LDZ2 ;token INC2 ;shex JSR2 ADD2 .p/ptr STZ2 POP JMP2r
		&no-padrel
	( labels )
	DUP LIT '@ NEQ ,&no-label JCN
		;scope #0030 ;mclr JSR2
		;token INC2 ;scope ;scpy JSR2
		;token INC2 .p/ptr LDZ2 ;create-label JSR2 POP JMP2r
		&no-label
	DUP LIT '& NEQ ,&no-sublabel JCN
		;buf #0030 ;mclr JSR2
		;scope ;buf ;scpy JSR2
		LIT '/ ;buf ;scap JSR2 STA
		;token INC2 ;buf ;scat JSR2
		;buf .p/ptr LDZ2 ;create-label JSR2 POP JMP2r
		&no-sublabel
	( literals )
	DUP LIT '# NEQ ,&no-lithex JCN
		;token-lithex JSR2 POP JMP2r
		&no-lithex
	DUP LIT '. NEQ ,&no-litzp JCN
		;token INC2 LIT '. .p/ptr LDZ2 INC2 ;create-reference JSR2
		#ff ;write-litbyte JSR2 POP JMP2r
		&no-litzp
	DUP LIT ', NEQ ,&no-litrel JCN
		;token INC2 LIT ', .p/ptr LDZ2 INC2 ;create-reference JSR2
		#ff ;write-litbyte JSR2 POP JMP2r
		&no-litrel
	DUP LIT '; NEQ ,&no-litabs JCN
		;token INC2 LIT '; .p/ptr LDZ2 INC2 ;create-reference JSR2
		#ffff ;write-litshort JSR2 POP JMP2r
		&no-litabs
	DUP LIT ': NEQ ,&no-rawabs JCN
		;token INC2 LIT ': .p/ptr LDZ2 ;create-reference JSR2
		#ffff ;write-short JSR2 POP JMP2r
		&no-rawabs
	( ascii )
	DUP LIT '' NEQ ,&no-rawchr JCN
		;token INC2 LDA ;write-byte JSR2 POP JMP2r
		&no-rawchr
	DUP LIT '" NEQ ,&no-rawstr JCN
		;token INC2 &w LDAk ;write-byte JSR2 INC2 LDAk ,&w JCN POP2
		POP JMP2r
		&no-rawstr
	( ignore )
	DUP LIT '[ NEQ ,&no-ignl JCN
		POP JMP2r
		&no-ignl
	DUP LIT '] NEQ ,&no-ignr JCN
		POP JMP2r
		&no-ignr
	POP
	( special )
	;token ;is-opcode JSR2 #00 EQU ,&no-opcode JCN
		;token ;find-opcode JSR2 ;write-byte JSR2 JMP2r
		&no-opcode
	;token ;slen JSR2 #0004 NEQ2 ,&no-rawshort JCN
		;token ;sshort JSR2 ;write-short JSR2 JMP2r
		&no-rawshort
	;token ;slen JSR2 #0002 NEQ2 ,&no-rawbyte JCN
		;token ;sbyte JSR2 ;write-byte JSR2 JMP2r
		&no-rawbyte
	;token ;&unknown-token-txt ;print-error JSR2

JMP2r
	&unknown-token-txt "unknown-token $1

@resolve-reference ( ref* -- )

	STH2k
	( rune )
	#0002 ADD2 LDA
	DUP LIT '. NEQ ,&no-litzp JCN
		STH2kr #0003 ADD2 ;find-label JSR2 LDA2 NIP
		STH2kr LDA2 ;dst ADD2 STA POP POP2r JMP2r
		&no-litzp
	DUP LIT ', NEQ ,&no-litrel JCN
		STH2kr #0003 ADD2 ;find-label JSR2 LDA2 STH2kr LDA2 SUB2 #0002 SUB2 NIP 
		STH2kr LDA2 ;dst ADD2 STA POP POP2r JMP2r
		&no-litrel
	DUP LIT '; NEQ ,&no-litabs JCN
		STH2kr #0003 ADD2 ;find-label JSR2 LDA2 STH2kr LDA2 ;dst ADD2 STA2 POP POP2r JMP2r
		&no-litabs
	DUP LIT ': NEQ ,&no-rawabs JCN
		STH2kr #0003 ADD2 ;find-label JSR2 LDA2 STH2kr LDA2 ;dst ADD2 STA2 POP POP2r JMP2r
		&no-rawabs
	POP
	POP2r

JMP2r

@token-lithex ( -- )

	;token INC2 ;slen JSR2 #0004 NEQ2 ,&no-short JCN
		;token INC2 ;sshort JSR2 ;write-litshort JSR2 JMP2r
		&no-short
	;token INC2 ;slen JSR2 #0002 NEQ2 ,&no-byte JCN
		;token INC2 ;sbyte JSR2 ;write-litbyte JSR2 JMP2r
		&no-byte
	;token ;&error-invalid-hex ;print-error JSR2

JMP2r
	&error-invalid-hex "invalid-lithex $1

@create-label ( name* addr* -- )

	( LIT '@ #18 DEO DUP2 ;print JSR2 #20 #18 DEO OVR2 ;print-str JSR2 #0a #18 DEO )

	( write ref )
	;sym .s/ptr LDZ2 STH2k ADD2 STA2
	INC2r INC2r
	( write string )
	DUP2 ;sym STH2kr ADD2 ;scpy JSR2
	;slen JSR2 STH2 ADD2r INC2r STH2r .s/ptr STZ2

JMP2r

@create-reference ( name* rune addr* -- )

	( LIT '- #18 DEO DUP2 ;print JSR2 #2018 DEO [ STH ] OVR2 ;print-str JSR2 #0a18 DEO [ STHr ] )

	( addr )
	;ref .r/ptr LDZ2 STH2k ADD2 STA2
	( rune )
	INC2r INC2r
	;ref STH2kr ADD2 STA
	INC2r
	( sublabel )
	LDAk LIT '& NEQ ,&no-sublabel JCN
		;buf #0030 ;mclr JSR2
		;scope ;buf ;scpy JSR2
		LIT '/ ;buf ;scap JSR2 STA
		INC2 ;buf ;scat JSR2
		;buf
		&no-sublabel
	( write string )
	DUP2 ;ref STH2kr ADD2 ;scpy JSR2
	;slen JSR2 STH2 ADD2r INC2r STH2r .r/ptr STZ2

JMP2r

@find-label ( name* -- addr* )

	STH2
	;sym
	&while
		DUP2 #0002 ADD2 STH2kr ;scmp JSR2 #00 EQU ,&continue JCN
			POP2r JMP2r
			&continue
		( eol )
		#0002 ADD2 ;scap JSR2 INC2 DUP2 #0002 ADD2 LDA ,&while JCN
	POP2
	STH2r ;&error-invalid-label ;print-error JSR2
	#0000

JMP2r
	&error-invalid-label "invalid-label $1

@write-litbyte ( byte -- )

	( LITk ) #80 ,write-byte JSR ,write-byte JSR

JMP2r

@write-litshort ( short* -- )

	( LIT2k ) #a0 ,write-byte JSR

@write-short ( short -- )

	SWP ,write-byte JSR

@write-byte ( byte -- )

	;dst .p/ptr LDZ2 STH2k ADD2 STA
	INC2r STH2kr .p/ptr STZ2
	STH2r .p/len STZ2

JMP2r

@opcodes
	"LIT $1 "INC $1 "POP $1 "DUP $1 "NIP $1 "SWP $1 "OVR $1 "ROT $1
	"EQU $1 "NEQ $1 "GTH $1 "LTH $1 "JMP $1 "JCN $1 "JSR $1 "STH $1
	"LDZ $1 "STZ $1 "LDR $1 "STR $1 "LDA $1 "STA $1 "DEI $1 "DEO $1
	"ADD $1 "SUB $1 "MUL $1 "DIV $1 "AND $1 "ORA $1 "EOR $1 "SFT $1

@brk-txt "BRK $1

@is-opcode ( string* -- bool )

	DUP2 ;brk-txt ;scmp JSR2 #00 EQU ,&continue JCN
		POP2 #01 JMP2r
		&continue

@find-opcode ( name* -- byte )

	STH2
	#2000
	&loop
		#00 OVR #20 SFT2 ;opcodes ADD2 STH2kr ;scmp-seg JSR2 #00 EQU ,&no-found JCN
			NIP STH2r ,find-mode JSR ADD JMP2r
			&no-found
		INC GTHk ,&loop JCN
	POP2
	POP2r
	#00

JMP2r

@find-mode ( mode* -- byte )

	LITr 00
	;opcodes OVR2 ;scmp-seg JSR2 #70 SFT STH ADDr
	#0003 ADD2
	LDAk #00 EQU ,&end JCN
	&while
		LDAk LIT '2 EQU #50 SFT STH ADDr
		LDAk LIT 'r EQU #60 SFT STH ADDr
		LDAk LIT 'k EQU #70 SFT STH ADDr
		INC2 LDAk ,&while JCN
	&end
	POP2
	STHr

JMP2r

@sshort ( str* -- short* )

	INC2k INC2 ,sbyte JSR STH
	,sbyte JSR STHr

JMP2r

@sbyte ( str* -- byte )

	LDAk ,chex JSR STH
	INC2 LDA ,chex JSR
	STHr #40 SFT ADD

JMP2r

@shex ( str* -- short* )

	LIT2r 0000
	&while
		LITr 40 SFT2r
		LITr 00
		LDAk ,chex JSR STH ADD2r
		INC2 LDAk ,&while JCN
	POP2
	STH2r

JMP2r

@chex ( char -- value )

	DUP #2f GTH OVR #3a LTH AND ,&number JCN
	DUP #60 GTH OVR #67 LTH AND ,&lc JCN
		POP #00 JMP2r
	&number #30 SUB JMP2r
	&lc #57 SUB JMP2r

JMP2r

( helpers )

@mclr ( addr* len* -- )

	OVR2 ADD2 SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

JMP2r

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 SUB2

JMP2r

@scap ( str* -- str-end* )

	LDAk #00 NEQ JMP JMP2r
	&while INC2 LDAk ,&while JCN

JMP2r

@scat ( src* dst* -- )

	DUP2 ,slen JSR ADD2 ,scpy JSR

JMP2r

@scpy ( src* dst* -- )
	
	STH2
	&while
		LDAk STH2kr STA INC2r
		INC2 LDAk ,&while JCN
	POP2
	#00 STH2r STA

JMP2r

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

JMP2r

@scmp-seg ( a* b* -- flag )

	STH2
	&loop
		LDAk LDAkr STHr EQU ,&not-diff JCN
			POP2 POP2r #00 JMP2r
			&not-diff
		INC2k LDA #00 NEQ ,&continue JCN
			POP2 POP2r #01 JMP2r
			&continue
		INC2 INC2r
		,&loop JMP
	POP2 POP2r #00

JMP2r

@scmp ( a* b* -- flag )

	STH2
	&loop
		LDAk LDAkr STHr EQU ,&not-diff JCN
			POP2 POP2r #00 JMP2r
			&not-diff
		LDAk LDAkr STHr ORA ,&not-end JCN
			POP2 POP2r #01 JMP2r
			&not-end
		INC2 INC2r
		,&loop JMP
	POP2 POP2r #00

JMP2r

@print ( short* -- )

	&short ( short* -- ) SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO

JMP2r

@print-error ( token* error* -- )

	SWP2 ,print-str JSR #20 #18 DEO

@print-str ( str* -- )

	#0001 SUB2
	&while
		INC2 LDAk DUP #18 DEO ,&while JCN
	POP2

JMP2r

( buffers )

@sym $4000 @ref $4000 @dst $0100 &clip
